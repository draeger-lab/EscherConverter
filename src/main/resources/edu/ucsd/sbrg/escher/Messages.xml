<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<!-- 
 *********************************************************************** 
 * This file is part of the interactive pathway explorer EscherConverter.
 * 
 * Copyright (C) 2013-2017 by the University of California, San Diego.
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation. A copy of the license agreement is provided in the file
 * named "LICENSE.txt" included with this software distribution and also
 * available online as http://www.gnu.org/licenses/lgpl-3.0-standalone.html.
 ***********************************************************************
 *
 * Version: $Rev: 1334 $
-->
<properties>
  <comment>
  This configuration describes the labels of buttons and menu items or 
  some important user messages in SBMLsqueezer-related graphical user interfaces.
  Although the preferred way would be to have separate key-value pairs for
  actual labels and their corresponding tooltips, you may want to use just 
  one key-value pair, in which the tooltip is located after the separator 
  ";". Otherwise, please use the suffix "_TOOLTIP" to indicate a tooltip 
  for some label.
  
  Please see the JavaDoc for MessageFormatter and Formatter. 
  </comment>
  
  <entry key="EscherOptions">Escher options</entry>
  <entry key="EscherOptions_TOOLTIP">These options influence how the output will be created and how the Escher maps are interpreted.</entry>
  <entry key="FORMAT">Output file format</entry>
  <entry key="FORMAT_TOOLTIP">The desired format for the conversion, e.g., SBML.</entry>
  <entry key="COMBINE">Combine multiple layouts of an SBML file.</entry>
  <entry key="COMBINE_TOOLTIP">If the SBML file contains more than one layout, whether to combine them or not. False by default.</entry>
  <entry key="EXTRACT_COBRA">Extract CoBRA model from SBML.</entry>
  <entry key="EXTRACT_COBRA_TOOLTIP">If SBMl file is FBC compliant, then extract COBRA model from it. Defaults to false.</entry>
  <entry key="IGNORE_VALIDATION">Ignore the result of input-file validation.</entry>
  <entry key="IGNORE_VALIDATION_TOOLTIP">Forces the program to try to convert files judged invalid. No guarantee that anything sensible will happen or the program will even terminate: Only use this if you are certain that the file is valid</entry>
  <entry key="INFER_COMPARTMENT_BOUNDS">Infer compartment boundaries</entry>
  <entry key="INFER_COMPARTMENT_BOUNDS_TOOLTIP">This converter can infer where the boundaries of compartments could be drawn. To this end, it uses each node's BiGG ids to identify the compartment of all metabolites. Assuming that compartments have rectangular shapes, the algorithm can find the outermost node on each side of the box and hence obtain the boundaries of the compartment. However, this methods will fail when metabolites are drawn inside of such a box that belong to a different compartment that is actually further outside. For this reason, this option is deactivated by default.</entry>
  <entry key="CANVAS_DEFAULT_WIDTH">Default canvas width</entry>
  <entry key="CANVAS_DEFAULT_WIDTH_TOOLTIP">This value is used when no width has been defined for the canvas. Since the width attribute is mandatory for the layout, a default value must be provided in these cases.</entry>
  <entry key="CANVAS_DEFAULT_HEIGHT">Default canvas height</entry>
  <entry key="CANVAS_DEFAULT_HEIGHT_TOOLTIP">Just as in the case of the width of the canvas, this value needs to be specified for cases where the JSON input file lacks an explicit specification of the canvas height.</entry>
  <entry key="COMPARTMENT_ID">Compartment identifier</entry>
  <entry key="COMPARTMENT_ID_TOOLTIP">A compartment needs to have a unique identifier, which needs to be a machine-readable Sting that must start with a letter or underscore and can only contain ASCII characters. Since the JSON file does not provide this information, this option allows you to specify the required identifier.</entry>
  <entry key="COMPARTMENT_ID_DEFAULT_VALUE">default</entry>
  <entry key="COMPARTMENT_NAME">Compartment name</entry>
  <entry key="COMPARTMENT_NAME_TOOLTIP">With this option it is possible to define a name for the default compartment can be that needs to be generated for the conversion to SBML. The name does not have any restrictions, i.e., any UTF-8 character can be used.</entry>
  <entry key="COMPARTMENT_NAME_DEFAULT_VALUE">Default compartment</entry>
  <entry key="GROUP_LAYOUT">Layout</entry>
  <entry key="GROUP_LAYOUT_TOOLTIP">The options in this group allow you to influence how large certain elements should be displayed.</entry>
  <entry key="GROUP_NAMING">Components and their naming</entry>
  <entry key="GROUP_NAMING_TOOLTIP">Here you can influence, which elements are to be included in the layout and how elements in the layout are to be called or identified.</entry>
  <entry key="GROUP_STYLES">Styles</entry>
  <entry key="GROUP_STYLES_TOOLTIP">These options allow you to customize the appearance of network elements.</entry>
  <entry key="LAYOUT_NAME">Layout name</entry>
  <entry key="LAYOUT_NAME_TOOLTIP">This should be a human-readable name for the layout that is to be created. This name might be displayed to describe the figure and should therefore be explanatory.</entry>
  <entry key="LAYOUT_NAME_DEFAULT_VALUE">Escher Layout</entry>
  <entry key="LAYOUT_ID">Layout identifier</entry>
  <entry key="LAYOUT_ID_TOOLTIP">In contrast to the name, this identifier does not have to be human-readable. This is a machine identifier, which must start with a letter or underscore and can only contain ASCII characters.</entry>
  <entry key="LAYOUT_ID_DEFAULT_NAME">Escher_Layout</entry>
  <entry key="LABEL_WIDTH">Label width</entry>
  <entry key="LABEL_WIDTH_TOOLTIP">This option defines the width of bounding boxes for text labels.</entry>
  <entry key="LABEL_HEIGHT">Label height</entry>
  <entry key="LABEL_HEIGHT_TOOLTIP">With this option you can specify the height of the bounding box of text labels.</entry>
  <entry key="NODE_DEPTH">Node depth</entry>
  <entry key="NODE_DEPTH_TOOLTIP">The length of nodes along z-coordinate. Escher maps are actually two-dimensional, but in general, a layout can be three-dimensional. This value should be an arbitrary value greater than zero, because some rendering engines might not display the node if its depth is zero.</entry>
  <entry key="NODE_LABEL_HEIGHT">Node label height</entry>
  <entry key="NODE_LABEL_HEIGHT_TOOLTIP">Node labels can have a size different from general labels in the graph. Here you can specify how height the bounding box of the labels for nodes should be.</entry>
  <entry key="REACTION_LABEL_HEIGHT">Reaction label height</entry>
  <entry key="REACTION_LABEL_HEIGTH_TOOLTIP">This option allows you to specify the height of labels for reactions. This value can be different from other labels in the network.</entry>
  <entry key="PRIMARY_NODE_WIDTH">Primary node width</entry>
  <entry key="PRIMARY_NODE_WIDTH_TOOLTIP">Escher maps distinguish between primary and secondary nodes. Primary nodes should be larger than secondary nodes and display the main flow of matter through the network. This option allows you to specify the width of primary nodes.</entry>
  <entry key="PRIMARY_NODE_HEIGHT">Primary node height</entry>
  <entry key="PRIMARY_NODE_HEIGHT_TOOLTIP">The primary node should be bigger than the secondary node. With this option you can specify the height of this type of nodes.</entry>
  <entry key="REACTION_NODE_RATIO">Reaction node ratio</entry>
  <entry key="REACTION_NODE_RATIO_TOOLTIP">This value is used as a conversion factor to determine the size of the reaction display box depending on the size of primary nodes. Height and width of reaction nodes are determined by dividing the corresponding values from the primary node size by this factor.</entry>
  <entry key="SECONDARY_NODE_RATIO">Secondary node ratio</entry>
  <entry key="SECONDARY_NODE_RATIO_TOOLTIP">Similar to the reaction node ratio, the size of secondary nodes (width and height) is determined by dividing the corresponding values from the primary nodes by this value.</entry>
  <entry key="Z">z-coordinate</entry>
  <entry key="Z_TOOLTIP">The position on the z-axis where the entire two-dimensional graph should be drawn.</entry>
  
  <entry key="EscherIOOptions">Input and output files</entry>
  <entry key="EscherIOOptions_TOOLTIP">Specify the file to be parsed and where to store the result.</entry>
  <entry key="INPUT">JSON input file or directory</entry>
  <entry key="INPUT_TOOLTIP">Specifies the JSON input file. If a directory is given, the conversion will be recursively performed.</entry>
  <entry key="OUTPUT">Output file or directory</entry>
  <entry key="OUTPUT_TOOLTIP">The path to the file into which the output should be written. If the input is a directory, this must also be a directory in order to perform a recursive conversion.</entry>
  <entry key="GROUP_IO">Input and output</entry>
  <entry key="GROUP_IO_TOOLTIP">Definition of input and output data files as well as the format for the output.</entry>
  
  <entry key="Escher2SBGN.cannotConvertExchange">Cannot convert exchange {0}</entry>
  <entry key="Escher2SBGN.midmarkerMissing">Cannot create process arcs for reaction {0} because mid-marker node is missing.</entry>
  <entry key="Escher2SBGN.midmarkerWithoutMultimarker">Midmarker ''{0}'' of reaction ''{1}'' is directly connected to {2} ''{3}'' (without multimarker).</entry>
  <entry key="Escher2SBGN.reactionNodeWithoutSegments">Reaction node {0} has no connected segments.</entry>
  
  <entry key="Escher2SBML.exchangeNotSupported">No rule implemented to convert exchange {0} to SBML layout.</entry>
  <entry key="Escher2SBML.undefinedID">No id defined for {0}.</entry>
  <entry key="Escher2SBML.skippingNode">Skipping node {0}</entry>
  <entry key="Escher2SBML.noNodeWithBiGGId">No corresponding metabolite found for from node with BiGG id {0}</entry>
  <entry key="Escher2SBML.metaboliteWithoutStoichiometry">No stoichiometry information available for metabolite with BiGG id=\"{0}\" in reaction {1}</entry>
  <entry key="Escher2SBML.segmentsLost">Could not attach the following segments to the graph: {0}</entry>
  <entry key="Escher2SBML.done">done</entry>
  <entry key="Escher2SBML.metaboliteDuplication">Metabolite {0} either participates in reaction {1} {2,number,integer} times or the reaction occurs more than once in the display.</entry>
  <entry key="Escher2SBML.replacementGlyph">Replacing duplicate BiGG id entry {0} with new glyph!</entry>
  <entry key="Escher2SBML.glyphIdNull">SpeciesGlyph for id=\"{0}\" is null.</entry>
  <entry key="Escher2SBML.textLabelIdNotUnique">Found text label with id=''{0}'' that is identical to the id of a {1}</entry>
  <entry key="Escher2SBML.reactionCompartmentUnknown">Could not identify compartment of reaction {0}</entry>
  <entry key="Escher2SBML.layoutIDnotunique">Layout identifier {0} changed to {1} as it is the same as model's id {2}.</entry>
  <entry key="Escher2SBML.metaboliteId_missing">{0} is not a valid id for a metabolite in reaction {1}.</entry>
  <entry key="Escher2SBML.inferredCompartment">In Compartment ''{0}'' {1} was not available and was therefore set to {2}.</entry>
  
  <entry key="Escher2Standard.reversed_segment">Reversed direction of segment {0}: {1} -> {2}.</entry>
  <entry key="Escher2Standard.node_lacking_metabolite">Node ''{0}'' in reaction ''{1}'' lacks a corresponding metabolite.</entry>
  <entry key="Escher2Standard.inconsistent_data_structure">Inconsistent data structure! Glyph ''{0}'' does not contain pointer to segment ''{1}''.</entry>
  <entry key="Escher2Standard.multiple_arcs">Data structure indicates that glyph ''{0}'' participates in reaction ''{1}'' with multiple arcs: {1}.</entry>
  <entry key="Escher2Standard.metabolite_lacking_node">Metabolite ''{0}'' in reaction ''{1}'' lacks a corresponding node.</entry>
  <entry key="Escher2Standard.missing_node">Node ''{0}'' cannot be found in reaction ''{1}''.</entry>
  
  <entry key="EscherCompartment.invalidId">Invalid compartment identifier ''{0}''.</entry>
  
  <entry key="EscherConverter.launchingBatchProcessing">Launching batch processing of {0}.</entry>
  <entry key="EscherConverter.incompleteCMDArgs">Incomplete command-line argument list. Please make sure to provide at least an input and an output file. Nothing to do.</entry>
  <entry key="EscherConverter.readingFile">Reading input file {0}.</entry>
  <entry key="EscherConverter.missingMetaInfo">Missing or misplaced meta-info: File seems to be malformatted.</entry>
  <entry key="EscherConverter.validationErrors">There are {0,number,integer} validation problems.</entry>
  <entry key="EscherConverter.creatingDir">Creating directory {0}.</entry>
  <entry key="EscherConverter.cannotWriteToFile">"Batch processing requires an output directory to be given. Cannot write to file {0}.</entry>
  <entry key="EscherConverter.licenseURL">https://raw.githubusercontent.com/zakandrewking/escher/master/LICENSE</entry>
  <entry key="EscherConverter.readingDone">Finished reading.</entry>
  
  <entry key="EscherConverterUI.About">About.html</entry>
  <entry key="EscherConverterUI.Help">Help.html</entry>
  <entry key="EscherConverterUI.License">License.txt</entry>
  <entry key="EscherConverterUI.couldNotLoadImage">Could not load icon image {0}.</entry>
  <entry key="EscherConverterUI.invalidURL">Invalid URL {0}.</entry>
  <entry key="EscherConverterUI.fileWritten">File {0} has been successfully written.</entry>
  
  <entry key="EscherConverterWorker.unknownFormat">Unknown output format {0}.</entry>
  
  <entry key="EscherParser.JSONObjectExpected">Element {0} is expected to be an instance of {2}, but found {1}. Skipping element.</entry>
  <entry key="EscherParser.undefinedStoichiometry">Found metabolite {0} with undefined stoichiometry in reaction {1}.</entry>
  <entry key="EscherParser.zeroStoichiometry">Found metabolite {0} with zero stoichiometry in reaction {1}.</entry>
  <entry key="EscherParser.cannotParse">Cannot parse {0}.</entry>
  <entry key="EscherParser.multipleParticipantsWithIdenticalBiGGID">Multiple reaction participants with BiGG id {0} in reaction {1}.</entry>
  <entry key="EscherParser.noMetaboliteWithGivenBiGGID">No metabolite with BiGG id=\"{0}\" in reaction {1}.</entry>
  
  <entry key="EscherParserWorker.progressMessage">Reading input file {0}</entry>
  
  <entry key="EscherReaction.skippingNullElement">Skipping {0} because it is null in reaction {1}.</entry>
  
  <entry key="Node.invalidCompartmentId">Could not find a compartment identifier in BiGG id ''{0}''.</entry>
  
  <entry key="EscherConverter.licenseURL">${project.license.url}</entry>
  <entry key="EscherConverter.version">${project.version}</entry>
  <entry key="PROVIDER">{0}
    {1}</entry>
  <entry key="ORGANIZATION">${organization.name}</entry>
  <entry key="INSTITUTE">Systems Biology Research Group</entry>
  <entry key="INCEPTION_YEAR">${project.inceptionYear}</entry>
  <entry key="YEAR">${year}</entry>
  
  <entry key="AutoDetectJSON">AutoDetect: Escher JSON file found</entry>
  <entry key="AutoDetectSBML">AutoDetect: SBML XML file found</entry>
  <entry key="AutoDetectSBGN">AutoDetect: SBGN XML file found</entry>
  <entry key="ValidatingEscher">Validation: Escher JSON Schema version 1.0.0</entry>
  <entry key="ValidatingSBML">Validation: SBML Layout Extension Level 3 Version 1</entry>
  <entry key="ValidatingSBGN">Validation: SBGN-ML Milestone 2</entry>
  <entry key="AutoDetectFail">AutoDetect: Cannot determine file type. Skipping</entry>
  <entry key="ValidationStart">Validating document</entry>
  <entry key="ValidationFailed">Validation failed</entry>
  <entry key="ValidationAbort">Not converting invalid file (Ignore validation if you are sure that the file is correct). </entry>
  <entry key="ValidationSkip">Ignoring unsuccessful validation and moving forward</entry>
  <entry key="InputOutputFormatIdentical">Input and output formats identical. Skipping file</entry>
  <entry key="UnsupportedFormat">Unknown or unsupported format. Skipping file</entry>
  <entry key="FileIOError">Fatal: Unable to read or write file {0}. Skipping file</entry>
  <entry key="JSONSchemaValid">JSON Schema validator successful</entry>
  <entry key="JSONSchemaInvalid">JSON Schema validator unsuccessful</entry>
  <entry key="EscherValidationFail">Not a valid Escher file</entry>
  <entry key="EscherValidationFail.NotJson">Not a valid Escher nor a valid JSON file (empty file)</entry>
  <entry key="SBGNLanguageUnspecified">No language specified on SBGN file. Can't validate</entry>
  <entry key="ConvertM1toM2">Milestone 1 file found, converting to Milestone 2</entry>
  <entry key="ConvertM1toM2Fail">Failure converting Milestone 1 file to Milestone 2. Please try to convert it manually</entry>
  <entry key="SBGNReadFail">Failure reading/parsing SBGN file</entry>
  <entry key="SBGNValidationFail">Not a valid SBGN-ML file</entry>
  <entry key="SBGNImportInit">Starting SBGN-ML to Escher conversion</entry>
  <entry key="RootBBoxFound">bbox found on root map, using it</entry>
  <entry key="RootBBoxNotFound">bbox not found on root map, falling back to default values</entry>
  <entry key="EscherCanvasAddSuccess">canvas info added successfully to escher map</entry>
  <entry key="EscherIdAddSuccess">calculating escher map_id from hex encoding</entry>
  <entry key="SBGNNotesFound">notes found on SBGN map, using as description</entry>
  <entry key="SBGNNotesNotFound">notes not found on SBGN map, using default description</entry>
  <entry key="GlyphNode">glyph with id "{0}" has class "{1}", converting to node</entry>
  <entry key="GlyphReaction">glyph with id "{0}" has class "{1}", converting to reaction + mid-marker</entry>
  <entry key="GlyphTextLabel">glyph with id "{0}" has class "{1}", converting to text label</entry>
  <entry key="GlyphUnsupportedClass">glyph with id "{0}" has unsupported class "{1}", ignoring</entry>
  <entry key="ArcMultiMarkerCount">arc with id {0} has {1} "next" (multi-markers) elements</entry>
  <entry key="GlyphLabelBBoxUnavailable">glyph with id {0} does not have bbox on its label, using parent bbox</entry>
  <entry key="GlyphToReactionId">glyph({0}) -> reaction({1})</entry>
  <entry key="GlyphReactionNoLabel">glyph with id "{0}" has no label, reaction name set to {1}</entry>
  <entry key="GlyphReactionLabel">glyph with id "{0}" has label "{1}", using as reaction name</entry>
  <entry key="ReactionIdenticalNameAndBigg">reaction "{0}" has identical name and bigg_id: {1}</entry>
  <entry key="ReactionSegmentAddInit">adding segments(arcs) to reaction {0}</entry>
  <entry key="ReactionSegmentAddFinish">added segments(arcs) to reaction {0}</entry>
  <entry key="ReactionArcsAdd">arc({0}) belongs to reaction({1}), adding segments</entry>
  <entry key="ConsumptionArcNegativeCoeff">arc({0}) is consumption arc, setting coefficient negative</entry>
  <entry key="ProductionArcNegativeCoeff">arc({0}) is production arc, setting coefficient positive</entry>
  <entry key="ArcSegmentCount">arc({0}) has {1} "next" elements, so {1}+1 segments</entry>
  <entry key="SegmentAdd">segment({0}) added from {1} to {2}</entry>
  <entry key="SBMLImportInit">starting SBML to Escher conversion</entry>
  <entry key="SBMLLayoutCount">sbml layout extension: {0} layouts found</entry>
  <entry key="SBMLLayoutConversionInit">layout id: {0}</entry>
  <entry key="RootDimensionsFound">dimensions found on layout, using as canvas values</entry>
  <entry key="RootDimensionsNotFound">dimensions not found on layout, using default canvas values</entry>
  <entry key="TextGlyphCount">text glyphs found: {0}</entry>
  <entry key="SpeciesGlyphCount">species glyphs (metabolites) found: {0}</entry>
  <entry key="ReactionGlyphCount">reaction glyphs found: {0}</entry>
  <entry key="TextGlyphNoText">text label ({0}) has no text</entry>
  <entry key="SpeciesGlyphToNode">creating node(metabolite) from species glyph ({0})</entry>
  <entry key="ReactionToMidMarker">creation mid-marker from reaction({0})</entry>
  <entry key="ReactionGlyphBBoxFound">reaction glyph ({0}) has bbox, using its coordinates</entry>
  <entry key="ReactionGlyphBBoxNotFound">reaction glyph ({0}) has no bbox, calculating coordinates</entry>
  <entry key="SRGToMultiMarkers">creating multi-markers from species reference glyph ({0})</entry>
    <entry key="SRGToMultiMarkersNullRole">species reference glyph ({0}) had no assigned role. Its role was set to undefinded.</entry>
  <entry key="MultiMarkerCount">{0} multi-markers created from species reference glyph ({1})</entry>
  <entry key="ReactionGlyphToReaction">reaction glyph ({0}) -> reaction ({1})</entry>
  <entry key="ReactionGlyphBBoxFound">reaction glyph ({0}) has bbox, using for label coordinates</entry>
  <entry key="ReactionGlyphBBoxNotFound">reaction glyph ({0}) has no bbox, calculating label coordinates from curve</entry>
  <entry key="ReactionGlyphProductCount">reaction glyph ({0}) has {1,number,integer} products</entry>
  <entry key="ReactionGlyphSubstrateCount">reaction glyph ({0}) has {1,number,integer} substrates (reactants)</entry>
  <entry key="MetaboliteCoefficient">metabolite(species): {0}, coefficient: {1,number}</entry>
  <entry key="SRGToSegments">adding segments: rg: {0}, srg: {1}, reaction: {2}</entry>
  <entry key="CurveSegmentCount">srg({0}) has {1} curve segments in its curve</entry>
  <entry key="CurveSegmentAdd">segment "{0}" created from "{1}" to "{2}"</entry>
  <entry key="PrimaryNode">srg({0}) set to primary node</entry>
  <entry key="SecondaryNode">srg({0}) set to secondary node</entry>
  <entry key="SBMLNoLayout">sbml file has no layout(s), nothing to write</entry>
  <entry key="SingleFileMultipleLayout">sbml file has multiple layout, but the output is a directory, writing nothing</entry>
  <entry key="BatchModeOutputNotDirectory">output must be a directory in batch mode. exiting.</entry>
  <entry key="SBMLFBCNotAvailable">file {0} doesn't have a fbc-compliant model, skipping extraction of COBRA model</entry>
  <entry key="SBMLFBCInit">fbc model found on file {0}, using cobrapy to extract model</entry>
  <entry key="SBMLFBCExtractionSuccessful">cobra model written to {0}</entry>
  <entry key="SBMLFBCExtractionFailed">couldn't extract cobra model, log follows:</entry>

</properties>
